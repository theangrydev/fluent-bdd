<?xml version="1.0"?>
<!--

    Copyright 2016 Liam Williams <liam.williams@zoho.com>.

    This file is part of fluent-bdd.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->
<ruleset
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="Android Application Rules"
        xmlns="http://pmd.sf.net/ruleset/1.0.0"
        xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd"
        xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd">

    <description>PMD rules to check for</description>

    <rule ref="rulesets/java/basic.xml"/>
    <rule ref="rulesets/java/braces.xml"/>
    <rule ref="rulesets/java/clone.xml"/>
    <rule ref="rulesets/java/codesize.xml"/>
    <rule ref="rulesets/java/controversial.xml">
        <exclude name="AtLeastOneConstructor"/><!-- This is pointless if an object does not need to set up anything -->
    </rule>
    <rule ref="rulesets/java/coupling.xml">
        <exclude name="LoosePackageCoupling"/><!-- This rule would be good but you can only configure class excludes not package excludes -->
        <exclude name="LawOfDemeter"/><!-- The Law of Demeter is a good thing to keep in mind, but this rule triggers too many false positives with e.g. fluent interfaces -->
    </rule>
    <rule ref="rulesets/java/design.xml"/>
    <rule ref="rulesets/java/empty.xml"/>
    <rule ref="rulesets/java/finalizers.xml"/>
    <rule ref="rulesets/java/imports.xml"/>
    <rule ref="rulesets/java/junit.xml"/>
    <rule ref="rulesets/java/logging-java.xml"/>
    <rule ref="rulesets/java/naming.xml">
        <exclude name="LongVariable"/><!-- There is nothing wrong with long descriptive variable names! -->
        <exclude name="GenericsNaming"/><!-- Single letter generic names are not descriptive enough, especially if there are several of them -->
        <exclude name="AbstractNaming"/><!-- Abstract classes should be called something descriptive, not just AbstractXXX -->
        <exclude name="ShortClassName"/><!-- It is useful to name e.g. When as a short name -->
    </rule>
    <rule ref="rulesets/java/optimizations.xml">
        <exclude name="MethodArgumentCouldBeFinal"/><!-- Final method arguments are not a way to improve performance since the final keyword does not end up in the class file -->
        <exclude name="LocalVariableCouldBeFinal"/><!-- Final variables are not a way to improve performance since the final keyword does not end up in the class file -->
    </rule>
    <rule ref="rulesets/java/strictexception.xml"/>
    <rule ref="rulesets/java/strings.xml"/>
    <rule ref="rulesets/java/sunsecure.xml"/>
    <rule ref="rulesets/java/typeresolution.xml"/>
    <rule ref="rulesets/java/unnecessary.xml"/>
    <rule ref="rulesets/java/unusedcode.xml"/>
</ruleset>